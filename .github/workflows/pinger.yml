name: Adaptive Pinger

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  adaptive-ping:
    runs-on: ubuntu-latest
    
    permissions:
      actions: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Adaptive ping with request history
        env:
          URL: https://cognify-backend-dymx.onrender.com/
          MAX_RETRIES: 3
          RETRY_DELAY: 30
          COLD_START_TIMEOUT: 60
          HISTORY_FILE: .github/workflows/.ping-history.json
        run: |
          echo "=================================================="
          echo "ü§ñ ADAPTIVE PINGER - 5 MIN INTERVAL"
          echo "üìÖ Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "üåê Target: $URL"
          echo "‚è±Ô∏è  Safety buffer: 10 minutes"
          echo "=================================================="
          echo ""
          
          CURRENT_TIME=$(date +%s)
          
          # Load history
          if [ -f "$HISTORY_FILE" ]; then
            echo "üìö Loading history..."
            LAST_SUCCESS_TIME=$(grep -o '"last_success_time":[0-9]*' "$HISTORY_FILE" | grep -o '[0-9]*' || echo "0")
            LAST_RESPONSE_TIME=$(grep -o '"last_response_time":"[^"]*"' "$HISTORY_FILE" | cut -d'"' -f4 || echo "0")
            CONSECUTIVE_COLD_STARTS=$(grep -o '"consecutive_cold_starts":[0-9]*' "$HISTORY_FILE" | grep -o '[0-9]*' || echo "0")
            AVERAGE_COLD_START_TIME=$(grep -o '"average_cold_start_time":[0-9.]*' "$HISTORY_FILE" | grep -o '[0-9.]*' || echo "0")
            TOTAL_PINGS=$(grep -o '"total_pings":[0-9]*' "$HISTORY_FILE" | grep -o '[0-9]*' || echo "0")
            
            echo "   Last success: $LAST_SUCCESS_TIME"
            echo "   Last response: ${LAST_RESPONSE_TIME}s"
            echo "   Cold start streak: ${CONSECUTIVE_COLD_STARTS}"
            echo "   Avg cold start: ${AVERAGE_COLD_START_TIME}s"
            echo "   Total pings: ${TOTAL_PINGS}"
          else
            echo "üìù First run - creating history"
            LAST_SUCCESS_TIME=0
            LAST_RESPONSE_TIME="0"
            CONSECUTIVE_COLD_STARTS=0
            AVERAGE_COLD_START_TIME=0
            TOTAL_PINGS=0
          fi
          echo ""
          
          # Time analysis
          if [ "$LAST_SUCCESS_TIME" -ne 0 ]; then
            TIME_SINCE=$((CURRENT_TIME - LAST_SUCCESS_TIME))
            MINUTES_SINCE=$((TIME_SINCE / 60))
            
            echo "‚è±Ô∏è  TIME ANALYSIS:"
            echo "   Time since last: ${TIME_SINCE}s (${MINUTES_SINCE} min)"
            echo "   Spin-down at: 900s (15 min)"
            echo "   Time remaining: $((900 - TIME_SINCE))s"
            echo ""
            
            if [ $TIME_SINCE -gt 840 ]; then
              echo "üö® CRITICAL: < 1 min until spin-down!"
              PRIORITY="CRITICAL"
            elif [ $TIME_SINCE -gt 600 ]; then
              echo "‚ö†Ô∏è  WARNING: 10+ minutes idle"
              PRIORITY="HIGH"
            elif [ $TIME_SINCE -lt 300 ]; then
              echo "‚úÖ SAFE: Recent activity"
              PRIORITY="LOW"
            else
              echo "üìä NORMAL: Standard check"
              PRIORITY="NORMAL"
            fi
            echo ""
          else
            PRIORITY="NORMAL"
            TIME_SINCE=999999
          fi
          
          # Adjust timeout
          if [ "$CONSECUTIVE_COLD_STARTS" -gt 2 ]; then
            ADJUSTED_TIMEOUT=80
            echo "üîß ADAPTIVE: Timeout increased to ${ADJUSTED_TIMEOUT}s"
            echo "   Reason: Multiple cold starts detected"
            echo ""
          else
            ADJUSTED_TIMEOUT=$COLD_START_TIMEOUT
          fi
          
          # Ping
          ATTEMPT=1
          SUCCESS=false
          COLD_START_DETECTED=false
          ACTUAL_RESPONSE_TIME=0
          
          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üéØ ATTEMPT $ATTEMPT/$MAX_RETRIES (Priority: $PRIORITY)"
            echo "üìÖ $(date '+%Y-%m-%d %H:%M:%S %Z')"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
            if [ $ATTEMPT -eq 1 ]; then
              TIMEOUT=$ADJUSTED_TIMEOUT
            else
              TIMEOUT=25
            fi
            echo "‚è≥ Timeout: ${TIMEOUT}s"
            
            START=$(date +%s)
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}|%{time_total}" "$URL" --max-time $TIMEOUT 2>&1)
            EXIT_CODE=$?
            END=$(date +%s)
            
            STATUS=$(echo "$RESPONSE" | cut -d'|' -f1)
            TIME_TAKEN=$(echo "$RESPONSE" | cut -d'|' -f2)
            TOTAL=$((END - START))
            
            echo ""
            echo "üìä RESPONSE:"
            echo "   Status: $STATUS"
            echo "   Time: ${TIME_TAKEN}s"
            echo "   Total: ${TOTAL}s"
            
            # Detect cold start
            if [ "$EXIT_CODE" -eq 0 ] && [ -n "$TIME_TAKEN" ]; then
              TIME_INT=$(echo "$TIME_TAKEN" | cut -d'.' -f1 2>/dev/null || echo "0")
              if [ "$TIME_INT" -gt 5 ]; then
                COLD_START_DETECTED=true
                ACTUAL_RESPONSE_TIME=$TIME_INT
                echo "   ‚ùÑÔ∏è  COLD START (${TIME_TAKEN}s)"
              else
                echo "   üöÄ FAST (awake)"
                ACTUAL_RESPONSE_TIME=0
              fi
            fi
            echo ""
            
            # Check success
            if [ "$EXIT_CODE" -eq 0 ] && { [ "$STATUS" = "200" ] || [ "$STATUS" = "404" ] || [ "$STATUS" = "307" ]; }; then
              echo "‚úÖ SUCCESS!"
              
              # Update history
              if [ "$COLD_START_DETECTED" = true ]; then
                NEW_COLD_STARTS=$((CONSECUTIVE_COLD_STARTS + 1))
                
                if [ "$AVERAGE_COLD_START_TIME" = "0" ] || [ -z "$AVERAGE_COLD_START_TIME" ]; then
                  NEW_AVG=$ACTUAL_RESPONSE_TIME
                else
                  NEW_AVG=$(awk "BEGIN {print ($AVERAGE_COLD_START_TIME + $ACTUAL_RESPONSE_TIME) / 2}")
                fi
                
                echo ""
                echo "üìä LEARNING:"
                echo "   Cold streak: $NEW_COLD_STARTS"
                echo "   New avg: ${NEW_AVG}s"
                
                if [ "$NEW_COLD_STARTS" -ge 3 ]; then
                  RECOMMENDED=4
                  echo "   üö® Recommend: 4-min interval"
                elif [ "$NEW_COLD_STARTS" -ge 2 ]; then
                  RECOMMENDED=5
                  echo "   ‚ö†Ô∏è  Recommend: Keep 5-min"
                else
                  RECOMMENDED=5
                  echo "   ‚úÖ Recommend: 5-min OK"
                fi
              else
                NEW_COLD_STARTS=0
                NEW_AVG=$AVERAGE_COLD_START_TIME
                RECOMMENDED=5
                echo ""
                echo "üìä LEARNING:"
                echo "   Cold streak: RESET"
                echo "   ‚úÖ 5-min interval working"
              fi
              
              # Save history
              NEW_TOTAL=$((TOTAL_PINGS + 1))
              
              cat > "$HISTORY_FILE" << ENDOFFILE
{
  "last_success_time": $CURRENT_TIME,
  "last_response_time": "$TIME_TAKEN",
  "consecutive_cold_starts": $NEW_COLD_STARTS,
  "average_cold_start_time": $NEW_AVG,
  "total_pings": $NEW_TOTAL,
  "last_status_code": $STATUS,
  "recommended_interval_minutes": $RECOMMENDED,
  "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
}
ENDOFFILE
              
              echo "üíæ History saved"
              SUCCESS=true
              break
              
            elif [ "$STATUS" = "000" ] || [ -z "$STATUS" ] || [ "$EXIT_CODE" -ne 0 ]; then
              echo "‚ùå FAILURE"
              
              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "üîÑ Retry in ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
                ATTEMPT=$((ATTEMPT + 1))
              else
                echo "‚õî Max retries"
                
                NEW_TOTAL=$((TOTAL_PINGS + 1))
                cat > "$HISTORY_FILE" << ENDOFFILE
{
  "last_success_time": $LAST_SUCCESS_TIME,
  "last_response_time": "FAILED",
  "consecutive_cold_starts": $CONSECUTIVE_COLD_STARTS,
  "average_cold_start_time": $AVERAGE_COLD_START_TIME,
  "total_pings": $NEW_TOTAL,
  "last_status_code": 0,
  "recommended_interval_minutes": 4,
  "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
  "note": "Failed - may need 4-min interval"
}
ENDOFFILE
                break
              fi
            else
              echo "‚ö†Ô∏è  Status $STATUS (responding)"
              SUCCESS=true
              break
            fi
          done
          
          echo ""
          echo "=================================================="
          echo "üìã SUMMARY"
          echo "=================================================="
          echo "Status: $([ "$SUCCESS" = true ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILED")"
          echo "Attempts: $ATTEMPT"
          echo "Cold start: $([ "$COLD_START_DETECTED" = true ] && echo "Yes ‚ùÑÔ∏è" || echo "No üöÄ")"
          echo "Priority: $PRIORITY"
          echo "Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "=================================================="
          
          exit 0
      
      - name: Commit history
        if: always()
        run: |
          git config user.name "Pinger Bot"
          git config user.email "pinger@actions"
          git add .github/workflows/.ping-history.json 2>/dev/null || true
          git diff --quiet && git diff --staged --quiet || git commit -m "Update ping history [skip ci]" || true
          git push || true
      
      - name: Keep workflow alive
        if: always()
        run: |
          echo "Last: $(date -u)" > .github/workflows/.keepalive